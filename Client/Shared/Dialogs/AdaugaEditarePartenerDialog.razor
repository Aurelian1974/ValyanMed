@using Client.Models
@using Client.Extensions
@using MudBlazor
@using global::Shared.DTOs
@using Client.Services
@inject JudetService JudetService
@inject ILocalitateService LocalitateService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @(Partener?.PartenerId > 0 ? "Editare partener" : "Adauga partener nou")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Informatii generale">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="@model.CodIntern" 
                                     Label="Cod intern" 
                                     Required="true" 
                                     ReadOnly="@ReadOnly" 
                                     Error="@(string.IsNullOrEmpty(model.CodIntern) && submitted)" 
                                     ErrorText="Codul intern este obligatoriu"
                                     HelperText="Cod unic de identificare intern" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="@model.Denumire" 
                                     Label="Denumire" 
                                     Required="true" 
                                     ReadOnly="@ReadOnly" 
                                     Error="@(string.IsNullOrEmpty(model.Denumire) && submitted)" 
                                     ErrorText="Denumirea este obligatorie"
                                     HelperText="Denumirea completa a partenerului" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="@model.CodFiscal" 
                                     Label="Cod fiscal" 
                                     ReadOnly="@ReadOnly"
                                     HelperText="CUI/CNP - optional" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSwitch @bind-Value="@model.Activ" 
                                  Label="Activ" 
                                  ReadOnly="@ReadOnly"
                                  Color="Color.Success" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            
            <MudTabPanel Text="Adresa">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="string"
                                         Value="@model.Judet"
                                         ValueChanged="OnJudetChanged"
                                         Label="Judet"
                                         Dense="true"
                                         ReadOnly="@ReadOnly"
                                         ToStringFunc="@(j => j)"
                                         SearchFunc="SearchJudet"
                                         Items="judete.Select(j => j.Nume).ToList()"
                                         HelperText="Selectati judetul" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="string"
                                         @bind-Value="model.Localitate"
                                         Label="Localitate"
                                         Dense="true"
                                         ReadOnly="@ReadOnly"
                                         ToStringFunc="@(l => l)"
                                         SearchFunc="SearchLocalitate"
                                         Items="localitati.Select(l => l.Nume).ToList()" 
                                         MaxItems="1000"
                                         HelperText="Selectati localitatea"
                                         Disabled="@(string.IsNullOrWhiteSpace(model.Judet))" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="@model.Adresa" 
                                     Label="Adresa completa" 
                                     ReadOnly="@ReadOnly"
                                     Lines="3"
                                     HelperText="Strada, numarul, alte detalii" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            
            <MudTabPanel Text="Informatii audit" Disabled="@(Partener?.PartenerId == 0)">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Value="@model.DataCreare.ToString("dd.MM.yyyy HH:mm:ss")" 
                                     Label="Data crearii" 
                                     ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Value="@model.DataActualizare.ToString("dd.MM.yyyy HH:mm:ss")" 
                                     Label="Data actualizarii" 
                                     ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Value="@(model.UtilizatorCreare ?? currentUser ?? "N/A")" 
                                     Label="Utilizator creare" 
                                     ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Value="@(model.UtilizatorActualizare ?? currentUser ?? "N/A")" 
                                     Label="Utilizator actualizare" 
                                     ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Value="@model.PartenerGuid.ToString()" 
                                     Label="GUID" 
                                     ReadOnly="true" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@(ReadOnly ? "Inchide" : "Anuleaza")</MudButton>
        @if (!ReadOnly)
        {
            <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@isBusy">
                @if (isBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Se proceseaza...</MudText>
                }
                else
                {
                    <MudText>Salveaza</MudText>
                }
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudBlazor.IMudDialogInstance MudDialog { get; set; }

    [Parameter] public PartenerModel? Partener { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    
    private PartenerModel model = new PartenerModel();
    private bool submitted = false;
    private bool isBusy = false;
    private List<JudetDto> judete = new();
    private List<LocalitateDto> localitati = new();
    private string? currentUser;

    protected override async Task OnInitializedAsync()
    {
        // Obtine utilizatorul curent din localStorage
        try
        {
            currentUser = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userFullName");
            if (string.IsNullOrEmpty(currentUser))
            {
                currentUser = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userName");
            }
        }
        catch
        {
            currentUser = "Utilizator necunoscut";
        }

        // Incarca judetele
        try
        {
            judete = await JudetService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Eroare la incarcarea judetelor: {ex.Message}", Severity.Error);
        }

        if (Partener != null)
        {
            // Editare - copiaza datele existente
            model = new PartenerModel
            {
                PartenerId = Partener.PartenerId,
                PartenerGuid = Partener.PartenerGuid,
                CodIntern = Partener.CodIntern,
                Denumire = Partener.Denumire,
                CodFiscal = Partener.CodFiscal,
                Judet = Partener.Judet,
                Localitate = Partener.Localitate,
                Adresa = Partener.Adresa,
                DataCreare = Partener.DataCreare,
                DataActualizare = Partener.DataActualizare,
                UtilizatorCreare = Partener.UtilizatorCreare,
                UtilizatorActualizare = Partener.UtilizatorActualizare,
                Activ = Partener.Activ
            };

            // Daca partenerul are judet setat, incarca localitatile pentru acel judet
            if (!string.IsNullOrWhiteSpace(model.Judet))
            {
                await LoadLocalitatiForJudet(model.Judet);
            }
        }
        else
        {
            // Adaugare noua - seteaza valori default
            model = new PartenerModel
            {
                PartenerGuid = Guid.NewGuid(),
                DataCreare = DateTime.Now,
                DataActualizare = DateTime.Now,
                UtilizatorCreare = currentUser,
                UtilizatorActualizare = currentUser,
                Activ = true
            };
        }
    }

    private async Task OnJudetChanged(string judet)
    {
        model.Judet = judet;
        model.Localitate = string.Empty; // Reseteaza localitatea cand se schimba judetul
        localitati.Clear();

        if (!string.IsNullOrWhiteSpace(judet))
        {
            await LoadLocalitatiForJudet(judet);
        }

        StateHasChanged();
    }

    private async Task LoadLocalitatiForJudet(string numeJudet)
    {
        try
        {
            var judet = judete.FirstOrDefault(j => j.Nume == numeJudet);
            if (judet != null)
            {
                localitati = await LocalitateService.GetByJudetAsync(judet.IdJudet);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Eroare la incarcarea localitatilor: {ex.Message}", Severity.Error);
        }
    }
    
    async Task Submit()
    {
        submitted = true;
        
        // Validari de baza
        if (string.IsNullOrEmpty(model.CodIntern) || string.IsNullOrEmpty(model.Denumire))
        {
            Snackbar.Add("Completati campurile obligatorii", Severity.Warning);
            return;
        }
        
        isBusy = true;
        
        try
        {
            // Actualizeaza informatiile pentru audit
            if (Partener == null)
            {
                // Adaugare noua
                model.UtilizatorCreare = currentUser;
                model.DataCreare = DateTime.Now;
            }
            
            model.UtilizatorActualizare = currentUser;
            model.DataActualizare = DateTime.Now;

            await Task.Delay(300); // Simuleaza delay pentru UX mai bun
            MudDialog.Close(DialogResult.Ok(model));
        }
        catch (Exception)
        {
            Snackbar.Add("A aparut o eroare la salvare", Severity.Error);
            isBusy = false;
        }
    }
    
    void Cancel() => MudDialog.Cancel();

    private Task<IEnumerable<string>> SearchJudet(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(judete.Select(j => j.Nume).AsEnumerable());

        var filtered = judete
            .Where(j => j.Nume
                .Split(' ', StringSplitOptions.RemoveEmptyEntries)
                .Any(word => word.Contains(value, StringComparison.InvariantCultureIgnoreCase)))
            .Select(j => j.Nume)
            .AsEnumerable();

        return Task.FromResult(filtered);
    }

    private async Task<IEnumerable<string>> SearchLocalitate(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(model.Judet))
            return Enumerable.Empty<string>();

        // Daca localitatile nu sunt inca incarcate pentru judetul curent, incarca-le
        if (localitati.Count == 0)
        {
            await LoadLocalitatiForJudet(model.Judet);
        }

        if (string.IsNullOrWhiteSpace(value))
            return localitati.Select(l => l.Nume);

        return localitati
            .Where(l => l.Nume.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(l => l.Nume);
    }
}
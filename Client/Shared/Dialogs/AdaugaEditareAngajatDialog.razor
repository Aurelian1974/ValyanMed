@using Client.Models
@using MudBlazor
@using global::Shared.DTOs
@using Client.Services
@inject JudetService JudetService
@inject ILocalitateService LocalitateService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @(Angajat?.Id > 0 ? "Editare angajat" : "Adauga angajat nou")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Informatii personale">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="@model.Nume" Label="Nume" Required="true" 
                                     ReadOnly="@ReadOnly" Error="@(string.IsNullOrEmpty(model.Nume) && submitted)" 
                                     ErrorText="Numele este obligatoriu" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="@model.Prenume" Label="Prenume" Required="true" 
                                     ReadOnly="@ReadOnly" Error="@(string.IsNullOrEmpty(model.Prenume) && submitted)" 
                                     ErrorText="Prenumele este obligatoriu" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="@model.CNP" Label="CNP" ReadOnly="@ReadOnly" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker @bind-Date="@model.DataNasterii" Label="Data nasterii" ReadOnly="@ReadOnly" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="@model.Gen" Label="Gen" ReadOnly="@ReadOnly">
                            <MudSelectItem Value="@("Masculin")">Masculin</MudSelectItem>
                            <MudSelectItem Value="@("Feminin")">Feminin</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="@model.StareCivila" Label="Stare civila" ReadOnly="@ReadOnly">
                            <MudSelectItem Value="@("Necasatorit")">Necasatorit</MudSelectItem>
                            <MudSelectItem Value="@("Casatorit")">Casatorit</MudSelectItem>
                            <MudSelectItem Value="@("Divortat")">Divortat</MudSelectItem>
                            <MudSelectItem Value="@("Vaduv")">Vaduv</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            
            <MudTabPanel Text="Document identitate">
                <MudGrid>
                    <MudItem xs="12" sm="4">
                        <MudSelect @bind-Value="@model.TipActIdentitate" Label="Tip act identitate" ReadOnly="@ReadOnly">
                            <MudSelectItem Value="@("CI")">CI</MudSelectItem>
                            <MudSelectItem Value="@("BI")">BI</MudSelectItem>
                            <MudSelectItem Value="@("P")">Pasaport</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudTextField @bind-Value="@model.SerieActIdentitate" Label="Serie" ReadOnly="@ReadOnly" />
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudTextField @bind-Value="@model.NumarActIdentitate" Label="Numar" ReadOnly="@ReadOnly" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            
            <MudTabPanel Text="Adresa">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="string"
                                         @bind-Value="model.Judet"
                                         Label="Judet"
                                         Dense="true"
                                         Required="true"
                                         ReadOnly="@ReadOnly"
                                         ToStringFunc="@(j => j)"
                                         SearchFunc="SearchJudet"
                                         Items="judete.Select(j => j.Nume).ToList()" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="string"
                                         @bind-Value="model.Localitate"
                                         Label="Localitate"
                                         Dense="true"
                                         Required="true"
                                         ReadOnly="@ReadOnly"
                                         ToStringFunc="@(l => l)"
                                         SearchFunc="SearchLocalitate"
                                         Items="localitati.Select(l => l.Nume).ToList()" 
                                         MaxItems="1000"/>
                    </MudItem>
                    <MudItem xs="12" sm="8">
                        <MudTextField @bind-Value="@model.Strada" Label="Strada" ReadOnly="@ReadOnly" />
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudTextField @bind-Value="@model.NumarStrada" Label="Numar" ReadOnly="@ReadOnly" />
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudTextField @bind-Value="@model.CodPostal" Label="Cod postal" ReadOnly="@ReadOnly" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            
            <MudTabPanel Text="Informatii angajare">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="@model.PozitieOrganizatie" Label="Pozitie in organizatie" ReadOnly="@ReadOnly" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="@model.Specialitate" Label="Specialitate" ReadOnly="@ReadOnly">
                            <MudSelectItem Value="@("Medic primar")">Medic primar</MudSelectItem>
                            <MudSelectItem Value="@("Medic specialist")">Medic specialist</MudSelectItem>
                            <MudSelectItem Value="@("Medic rezident")">Medic rezident</MudSelectItem>
                            <MudSelectItem Value="@("Asistenta medicala")">Asistenta medicala</MudSelectItem>
                            <MudSelectItem Value="@("Asistenta sefa")">Asistenta sefa</MudSelectItem>
                            <MudSelectItem Value="@("Personal auxiliar")">Personal auxiliar</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="@model.Departament" Label="Departament" ReadOnly="@ReadOnly">
                            <MudSelectItem Value="@("Medicina Interna")">Medicina Interna</MudSelectItem>
                            <MudSelectItem Value="@("Cardiologie")">Cardiologie</MudSelectItem>
                            <MudSelectItem Value="@("Neurologie")">Neurologie</MudSelectItem>
                            <MudSelectItem Value="@("Pediatrie")">Pediatrie</MudSelectItem>
                            <MudSelectItem Value="@("Chirurgie")">Chirurgie</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Date="@model.DataAngajarii" DateChanged="@(date => model.DataAngajarii = date.GetValueOrDefault(DateTime.Today))" 
                                      Label="Data angajarii" ReadOnly="@ReadOnly" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="@model.Status" Label="Status" ReadOnly="@ReadOnly">
                            <MudSelectItem Value="@("Activ")">Activ</MudSelectItem>
                            <MudSelectItem Value="@("Inactiv")">Inactiv</MudSelectItem>
                            <MudSelectItem Value="@("In concediu")">In concediu</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@(ReadOnly ? "Inchide" : "Anuleaza")</MudButton>
        @if (!ReadOnly)
        {
            <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@isBusy">
                @if (isBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Se proceseaza...</MudText>
                }
                else
                {
                    <MudText>Salveaza</MudText>
                }
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudBlazor.IMudDialogInstance MudDialog { get; set; }

    [Parameter] public PersoanaModel Angajat { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    
    private PersoanaModel model = new PersoanaModel();
    private bool submitted = false;
    private bool isBusy = false;
    private List<JudetDto> judete = new();
    private List<LocalitateDto> localitati = new();

    protected override async Task OnInitializedAsync()
    {
        judete = await JudetService.GetAllAsync();

        if (Angajat != null)
        {
            model = new PersoanaModel
            {
                Id = Angajat.Id,
                Guid = Angajat.Guid,
                Nume = Angajat.Nume,
                Prenume = Angajat.Prenume,
                Judet = Angajat.Judet,
                Localitate = Angajat.Localitate,
                Strada = Angajat.Strada,
                NumarStrada = Angajat.NumarStrada,
                CodPostal = Angajat.CodPostal,
                PozitieOrganizatie = Angajat.PozitieOrganizatie,
                DataNasterii = Angajat.DataNasterii,
                DataCreare = Angajat.DataCreare,
                DataModificare = Angajat.DataModificare,
                CNP = Angajat.CNP,
                TipActIdentitate = Angajat.TipActIdentitate,
                SerieActIdentitate = Angajat.SerieActIdentitate,
                NumarActIdentitate = Angajat.NumarActIdentitate,
                StareCivila = Angajat.StareCivila,
                Gen = Angajat.Gen,
                Specialitate = Angajat.Specialitate,
                Departament = Angajat.Departament,
                DataAngajarii = Angajat.DataAngajarii,
                Status = Angajat.Status
            };
        }
        else
        {
            model = new PersoanaModel
            {
                Guid = Guid.NewGuid(),
                DataCreare = DateTime.Now,
                Status = "Activ",
                DataAngajarii = DateTime.Today
            };
        }
    }
    
    async Task Submit()
    {
        submitted = true;
        
        // Basic validation
        if (string.IsNullOrEmpty(model.Nume) || string.IsNullOrEmpty(model.Prenume))
        {
            Snackbar.Add("Completati campurile obligatorii", Severity.Warning);
            return;
        }
        
        isBusy = true;
        
        try
        {
            await Task.Delay(300); // Simulate network delay for better UX
            MudDialog.Close(DialogResult.Ok(model));
        }
        catch (Exception)
        {
            Snackbar.Add("A aparut o eroare la salvare", Severity.Error);
            isBusy = false;
        }
    }
    
    void Cancel() => MudDialog.Cancel();

    private Task<IEnumerable<string>> SearchJudet(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(judete.Select(j => j.Nume).AsEnumerable());

        var filtered = judete
            .Where(j => j.Nume
                .Split(' ', StringSplitOptions.RemoveEmptyEntries)
                .Any(word => word.Contains(value, StringComparison.InvariantCultureIgnoreCase)))
            .Select(j => j.Nume)
            .AsEnumerable();

        return Task.FromResult(filtered);
    }

    private async Task<IEnumerable<string>> SearchLocalitate(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(model.Judet))
            return Enumerable.Empty<string>();

        var judet = judete.FirstOrDefault(j => j.Nume == model.Judet);
        if (judet == null)
            return Enumerable.Empty<string>();

        localitati = await LocalitateService.GetByJudetAsync(judet.IdJudet);

        if (string.IsNullOrWhiteSpace(value))
            return localitati.Select(l => l.Nume);

        return localitati
            .Where(l => l.Nume.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(l => l.Nume);
    }

    private List<PersoanaModel> angajatiList => new() { model };

    
}
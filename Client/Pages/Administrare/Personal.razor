@page "/administrare/personal"
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Client.Models
@using Client.Shared.Dialogs
@using Client.Services
@inject IPersoanaService PersoanaService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor

<MudText Typo="Typo.h4" Class="mb-4">Administrare Personal</MudText>

<MudPaper Elevation="3" Class="pa-4">
    <MudToolBar Dense="true" DisableGutters="true" Class="mb-2">
        <MudText Typo="Typo.h6">Lista personalului (@personalListFiltrat.Count)</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" 
                  OnClick="AdaugaAngajat" Disabled="@_loading">Adaugă angajat</MudButton>
    </MudToolBar>

    @if (_loadError)
    {
        <MudAlert Severity="Severity.Error" Class="mb-3">
            Nu s-a putut încărca lista de personal. @_errorMessage
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="LoadPersonalAsync" Class="ml-auto">
                Încearcă din nou
            </MudButton>
        </MudAlert>
    }

    @if (personalListFiltrat.Count == 0 && !_loading && !_loadError)
    {
        <MudAlert Severity="Severity.Info" Dense="true">
            Nu există personal înregistrat.
        </MudAlert>
    }

    <MudText Typo="Typo.h6" Class="mt-4 mb-2">Grid MudBlazor</MudText>
    <MudDataGrid T="PersoanaModel" Items="@personalListFiltrat"
        MultiSelection="true"
        Dense="true"
        Hover="true"
        Bordered="true"
        Striped="true"
        Filterable="true"
        QuickFilter="@_quickFilter"
        SortMode="SortMode.Multiple"
        Hideable="true"
        Loading="@_loading"
        LoadingProgressColor="Color.Primary"
        RowClick="@RowClicked"
        SelectedItemsChanged="@SelectedItemsChanged">

        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Caută"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0"
                          Immediate="true" />
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="PersoanaModel" />
            <PropertyColumn Property="x => x.Id" Title="ID" Hidden="true" />
            <PropertyColumn Property="x => x.Guid" Title="GUID" Hidden="true" />
            <PropertyColumn Property="x => x.Nume" Title="Nume" Filterable="true" SortBy="x => x.Nume" Groupable="true" />
            <PropertyColumn Property="x => x.Prenume" Title="Prenume" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.CNP" Title="CNP" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.Gen" Title="Gen" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.DataNasterii" Title="Data Nașterii" Format="dd.MM.yyyy" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.StareCivila" Title="Stare Civilă" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.DataCreare" Title="Data Creare" Format="dd.MM.yyyy" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.DataModificare" Title="Data Modificare" Format="dd.MM.yyyy HH:mm:ss" Filterable="true" Groupable="true" />

            <!-- Coloane din detaliu, dar Hidden, pentru grupare -->
            <PropertyColumn Property="x => x.TipActIdentitate" Title="Tip Act" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.SerieActIdentitate" Title="Serie Act" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.NumarActIdentitate" Title="Număr Act" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.Judet" Title="Județ" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.Localitate" Title="Localitate" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.Strada" Title="Strada" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.NumarStrada" Title="Număr Strada" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.CodPostal" Title="Cod Poștal" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.PozitieOrganizatie" Title="Poziție" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.Specialitate" Title="Specialitate" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.Departament" Title="Departament" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.DataAngajarii" Title="Data Angajării" Format="dd.MM.yyyy" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.Status" Title="Status" Hidden="true" Groupable="true" />

            <PropertyColumn T="PersoanaModel" TProperty="string" Title="Acțiuni" Sortable="false">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary"
                                  OnClick="@(() => EditareAngajat(@context.Item))" Disabled="@_loading" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error"
                                  OnClick="@(() => StergereAngajat(@context.Item))" Disabled="@_loading" />
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" Color="Color.Info"
                                  OnClick="@(() => VizualizareAngajat(@context.Item))" Disabled="@_loading" />
                </CellTemplate>
            </PropertyColumn>
        </Columns>

        <ChildRowContent>
            <MudPaper Class="pa-4" Elevation="0" Style="background: #f9f9f9;">
                <MudText Typo="Typo.subtitle2">Detalii suplimentare</MudText>
                <MudDivider Class="mb-2" />
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudText><b>Tip Act Identitate:</b> @context.Item.TipActIdentitate</MudText>
                        <MudText><b>Serie Act Identitate:</b> @context.Item.SerieActIdentitate</MudText>
                        <MudText><b>Număr Act Identitate:</b> @context.Item.NumarActIdentitate</MudText>
                        <MudText><b>Județ:</b> @context.Item.Judet</MudText>
                        <MudText><b>Localitate:</b> @context.Item.Localitate</MudText>
                        <MudText><b>Strada:</b> @context.Item.Strada</MudText>
                        <MudText><b>Număr Strada:</b> @context.Item.NumarStrada</MudText>
                        <MudText><b>Cod Poștal:</b> @context.Item.CodPostal</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText><b>Poziție Organizație:</b> @context.Item.PozitieOrganizatie</MudText>
                        <MudText><b>Specialitate:</b> @context.Item.Specialitate</MudText>
                        <MudText><b>Departament:</b> @context.Item.Departament</MudText>
                        <MudText><b>Data Angajării:</b> @FormatDate(context.Item.DataAngajarii ?? DateTime.MinValue)</MudText>
                        <MudText><b>Status:</b> @context.Item.Status</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </ChildRowContent>

        <PagerContent>
            <MudDataGridPager T="PersoanaModel" PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
        <NoRecordsContent>
            <MudText>Nu au fost găsite înregistrări care să corespundă criteriilor.</MudText>
        </NoRecordsContent>
    </MudDataGrid>

@*     <MudText Typo="Typo.h6" Class="mt-6 mb-2">Grid Syncfusion</MudText>
    <SfGrid DataSource="@personalListFiltrat" AllowPaging="true" AllowSorting="true" AllowFiltering="true"
            PageSettings="@(new GridPageSettings { PageSize = 10 })" Width="100%">
        <GridColumns>
            <GridColumn Field=@nameof(PersoanaModel.Nume) HeaderText="Nume" Width="120"></GridColumn>
            <GridColumn Field=@nameof(PersoanaModel.Prenume) HeaderText="Prenume" Width="120"></GridColumn>
            <GridColumn Field=@nameof(PersoanaModel.CNP) HeaderText="CNP" Width="120"></GridColumn>
            <GridColumn Field=@nameof(PersoanaModel.Gen) HeaderText="Gen" Width="80"></GridColumn>
            <GridColumn Field=@nameof(PersoanaModel.DataNasterii) HeaderText="Data Nașterii" Format="dd.MM.yyyy" Type="ColumnType.Date" Width="120"></GridColumn>
            <GridColumn Field=@nameof(PersoanaModel.StareCivila) HeaderText="Stare Civilă" Width="120"></GridColumn>
            <GridColumn Field=@nameof(PersoanaModel.Status) HeaderText="Status" Width="100"></GridColumn>
            <GridColumn HeaderText="Acțiuni" Width="150">
                <Template>
                    <button class="e-btn e-flat" @onclick="() => EditareAngajat((context as PersoanaModel))">Editare</button>
                    <button class="e-btn e-flat e-danger" @onclick="() => StergereAngajat((context as PersoanaModel))">Ștergere</button>
                    <button class="e-btn e-flat e-info" @onclick="() => VizualizareAngajat((context as PersoanaModel))">Vizualizare</button>
                </Template>
            </GridColumn>
        </GridColumns>
        <DetailTemplate Context="angajat">
             <div style="padding: 16px; background: #f9f9f9;">
                <b>Tip Act Identitate:</b> @angajat.TipActIdentitate <br />
                <b>Serie Act Identitate:</b> @angajat.SerieActIdentitate <br />
                <b>Număr Act Identitate:</b> @angajat.NumarActIdentitate <br />
                <b>Județ:</b> @angajat.Judet <br />
                <b>Localitate:</b> @angajat.Localitate <br />
                <b>Strada:</b> @angajat.Strada <br />
                <b>Număr Strada:</b> @angajat.NumarStrada <br />
                <b>Cod Poștal:</b> @angajat.CodPostal <br />
                <b>Poziție Organizație:</b> @angajat.PozitieOrganizatie <br />
                <b>Specialitate:</b> @angajat.Specialitate <br />
                <b>Departament:</b> @angajat.Departament <br />
                <b>Data Angajării:</b> @(angajat.DataAngajarii?.ToString("dd.MM.yyyy")) <br />
            </div>
        </DetailTemplate>
    </SfGrid>*@
</MudPaper> 

@if(_evenimente.Count > 0)
{
    <MudExpansionPanels Class="mt-4">
        <MudExpansionPanel Text="Jurnal activități" IsInitiallyExpanded="false">
            @foreach (var mesaj in _evenimente)
            {
                <MudText Typo="@Typo.body2">@mesaj</MudText>
            }
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" 
                          OnClick="@(() => _evenimente.Clear())">Golește jurnal</MudButton>
            </div>
        </MudExpansionPanel>
    </MudExpansionPanels>
}

@code {
    private string _searchString = "";
    private string _filterNume = "";
    private string _filterSpecialitate = "";
    private string _filterDepartament = "toate";
    private string _filterStatus = "toti";
    private DateTime? _filterDataDeLa;
    private DateTime? _filterDataPanaLa;
    private List<string> _evenimente = new();
    private List<PersoanaModel> personalList = new();
    private List<PersoanaModel> personalListFiltrat = new();
    private bool _loading = false;
    private bool _loadError = false;
    private string _errorMessage = "";
    private string deleteError;

    private bool showDeleteError => !string.IsNullOrEmpty(deleteError);

    private PersoanaModel angajat = new PersoanaModel();

    protected override async Task OnInitializedAsync()
    {
        await LoadPersonalAsync();
    }

    private async Task LoadPersonalAsync()
    {
        _loading = true;
        _loadError = false;
        _errorMessage = "";
        deleteError = null;

        try
        {
            personalList = await PersoanaService.GetAllPersonalAsync();
            personalListFiltrat = personalList;
            _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Date încărcate cu succes: {personalList.Count} angajați");
        }
        catch (Exception ex)
        {
            _loadError = true;
            _errorMessage = ex.Message;
            Snackbar.Add($"Eroare la încărcarea datelor: {ex.Message}", Severity.Error);
            _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void AplicaFiltre()
    {
        _loading = true;
        
        try
        {
            personalListFiltrat = personalList.Where(p => 
                (string.IsNullOrWhiteSpace(_filterNume) || p.Nume?.Contains(_filterNume, StringComparison.OrdinalIgnoreCase) == true) &&
                (string.IsNullOrWhiteSpace(_filterSpecialitate) || p.Specialitate?.Contains(_filterSpecialitate, StringComparison.OrdinalIgnoreCase) == true) &&
                (_filterDepartament == "toate" || p.Departament == _filterDepartament) &&
                (_filterStatus == "toti" || p.Status == _filterStatus) &&
                (!_filterDataDeLa.HasValue || !p.DataAngajarii.HasValue || p.DataAngajarii.Value.Date >= _filterDataDeLa.Value.Date) &&
                (!_filterDataPanaLa.HasValue || !p.DataAngajarii.HasValue || p.DataAngajarii.Value.Date <= _filterDataPanaLa.Value.Date)
            ).ToList();

            _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Filtre aplicate: {personalListFiltrat.Count} rezultate");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Eroare la filtrare: {ex.Message}", Severity.Error);
            _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare la filtrare: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private string FormatDate(DateTime date)
    {
        return date.ToString("dd.MM.yyyy");
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Activ" => Color.Success,
            "Inactiv" => Color.Error,
            "În concediu" => Color.Warning,
            _ => Color.Default
        };
    }

    private Func<PersoanaModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return x.Nume?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Prenume?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Specialitate?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Departament?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Status?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.CNP?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    };

    private async Task DeletePersoana(int id)
    {
        var result = await PersoanaService.DeletePersoanaAsync(id);
        if (!result.Success)
        {
            deleteError = result.ErrorMessage;
        }
        else
        {
            deleteError = null;
            // Reîncarcă lista sau actualizează UI-ul
        }
    }

    private void OnDeleteErrorClose()
    {
        deleteError = null;
    }

    // Event handlers
    void RowClicked(DataGridRowClickEventArgs<PersoanaModel> args)
    {
        _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Click pe rândul {args.RowIndex}: {args.Item.Nume} {args.Item.Prenume}");
    }

    void SelectedItemsChanged(HashSet<PersoanaModel> items)
    {
        if (items.Count > 0)
        {
            _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - {items.Count} angajați selectați");
        }
    }

    async Task AdaugaAngajat()
    {
        _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Inițiere adăugare angajat nou");
        
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AdaugaEditareAngajatDialog>("Adaugă angajat nou", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            var newAngajat = (PersoanaModel)result.Data;
            try
            {
                _loading = true;
                var id = await PersoanaService.CreatePersoanaAsync(newAngajat);
                newAngajat.Id = id;
                personalList.Add(newAngajat);
                personalListFiltrat = personalList; // Update filtered list directly since search panel was removed
                Snackbar.Add("Angajat adăugat cu succes", Severity.Success);
                _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Angajat adăugat: {newAngajat.Nume} {newAngajat.Prenume}");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la adăugarea angajatului: {ex.Message}", Severity.Error);
                _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare: {ex.Message}");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    async Task EditareAngajat(PersoanaModel angajat)
    {
        _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Editare angajat: {angajat.Nume} {angajat.Prenume}");
        
        var parameters = new DialogParameters();
        parameters.Add("Angajat", angajat);
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AdaugaEditareAngajatDialog>("Editează angajat", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            var updatedAngajat = (PersoanaModel)result.Data;
            try
            {
                _loading = true;
                var success = await PersoanaService.UpdatePersoanaAsync(updatedAngajat);
                if (success)
                {
                    var index = personalList.FindIndex(p => p.Id == updatedAngajat.Id);
                    if (index >= 0)
                    {
                        personalList[index] = updatedAngajat;
                        personalListFiltrat = personalList; // Update filtered list directly
                    }
                    Snackbar.Add("Angajat actualizat cu succes", Severity.Success);
                    _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Angajat actualizat: {updatedAngajat.Nume} {updatedAngajat.Prenume}");
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la actualizarea angajatului: {ex.Message}", Severity.Error);
                _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare: {ex.Message}");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    async Task StergereAngajat(PersoanaModel angajat)
    {
        _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Ștergere angajat: {angajat.Nume} {angajat.Prenume}");
        
        var parameters = new DialogParameters
        {
            { "ContentText", $"Sigur doriți să ștergeți angajatul {angajat.Nume} {angajat.Prenume}?" },
            { "ButtonText", "Șterge" },
            { "Color", Color.Error }
        };
        
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogResult = await DialogService.Show<ConfirmDialog>("Confirmare ștergere", parameters, options).Result;
        
        if (!dialogResult.Canceled)
        {
            try
            {
                _loading = true;
                var result = await PersoanaService.DeletePersoanaAsync(angajat.Id);
                if (result.Success)
                {
                    personalList.Remove(angajat);
                    personalListFiltrat = personalList.ToList(); // Create a new reference to ensure UI updates
                    Snackbar.Add("Angajat șters cu succes", Severity.Success);
                    _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Angajat șters: {angajat.Nume} {angajat.Prenume}");
                }
                else
                {
                    deleteError = result.ErrorMessage;
                    Snackbar.Add(deleteError, Severity.Error);
                    _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare la ștergere: {deleteError}");
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la ștergerea angajatului: {ex.Message}", Severity.Error);
                _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare: {ex.Message}");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    void VizualizareAngajat(PersoanaModel angajat)
    {
        _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Vizualizare angajat: {angajat.Nume} {angajat.Prenume}");
        
        var parameters = new DialogParameters();
        parameters.Add("Angajat", angajat);
        parameters.Add("ReadOnly", true);
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<AdaugaEditareAngajatDialog>($"Detalii angajat: {angajat.Nume} {angajat.Prenume}", parameters, options);
    }
}
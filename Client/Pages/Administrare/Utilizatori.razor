@page "/administrare/utilizatori"
@using System.ComponentModel.DataAnnotations
@using Client.Models
@using Client.Services
@using Client.Shared.Dialogs
@using MudBlazor
@using global::Shared.DTOs
@inject IUtilizatorService UtilizatorService
@inject IPersoanaService PersoanaService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Class="mb-4">Administrare Utilizatori</MudText>

<MudPaper Elevation="3" Class="pa-4">
    <MudToolBar Dense="true" DisableGutters="true" Class="mb-2">
        <MudText Typo="Typo.h6">Lista utilizatorilor (@utilizatoriListFiltrat.Count)</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" 
                  Color="Color.Success" 
                  StartIcon="@Icons.Material.Filled.Add" 
                  OnClick="AdaugaUtilizator" 
                  Disabled="@_loading">Adaugă utilizator</MudButton>
    </MudToolBar>

    @if (_loadError)
    {
        <MudAlert Severity="Severity.Error" Class="mb-3">
            Nu s-a putut încărca lista de utilizatori. @_errorMessage
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="LoadUtilizatoriAsync" Class="ml-auto">
                Încearcă din nou
            </MudButton>
        </MudAlert>
    }

    @if (utilizatoriListFiltrat.Count == 0 && !_loading && !_loadError)
    {
        <MudAlert Severity="Severity.Info" Dense="true">
            Nu există utilizatori înregistrați.
        </MudAlert>
    }

    <MudDataGrid T="UtilizatorDTO" Items="@utilizatoriListFiltrat"
                Dense="true"
                Hover="true"
                Bordered="true"
                Striped="true"
                Filterable="true"
                QuickFilter="@_quickFilter"
                SortMode="SortMode.Multiple"
                Hideable="true"
                Loading="@_loading"
                LoadingProgressColor="Color.Primary">

        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Caută"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         IconSize="Size.Medium"
                         Class="mt-0"
                         Immediate="true" />
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="ID" Hidden="true" />
            <PropertyColumn Property="x => x.NumeUtilizator" Title="Nume Utilizator" />
            <PropertyColumn Property="x => x.Email" Title="Email" />
            <PropertyColumn Property="x => x.Telefon" Title="Telefon" />
            <PropertyColumn Property="x => x.NumeComplet" Title="Persoană Asociată" />
            <PropertyColumn Property="x => x.DataCreare" Title="Data Creare" Format="dd.MM.yyyy HH:mm:ss" />
            <PropertyColumn Property="x => x.DataModificare" Title="Data Modificare" Format="dd.MM.yyyy HH:mm:ss" />

            <PropertyColumn T="UtilizatorDTO" TProperty="string" Title="Acțiuni" Sortable="false">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary"
                                  OnClick="@(() => EditareUtilizator(@context.Item))" Disabled="@_loading" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error"
                                  OnClick="@(() => StergereUtilizator(@context.Item))" Disabled="@_loading" />
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="UtilizatorDTO" PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
        <NoRecordsContent>
            <MudText>Nu au fost găsite înregistrări care să corespundă criteriilor.</MudText>
        </NoRecordsContent>
    </MudDataGrid>
</MudPaper>

@if(_evenimente.Count > 0)
{
    <MudExpansionPanels Class="mt-4">
        <MudExpansionPanel Text="Jurnal activități" IsInitiallyExpanded="false">
            @foreach (var mesaj in _evenimente)
            {
                <MudText Typo="@Typo.body2">@mesaj</MudText>
            }
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" 
                          OnClick="@(() => _evenimente.Clear())">Golește jurnal</MudButton>
            </div>
        </MudExpansionPanel>
    </MudExpansionPanels>
}

@code {
    private string _searchString = "";
    private List<string> _evenimente = new();
    private List<UtilizatorDTO> utilizatoriList = new();
    private List<UtilizatorDTO> utilizatoriListFiltrat = new();
    private List<PersoanaDTO> persoane = new();
    private bool _loading = false;
    private bool _loadError = false;
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUtilizatoriAsync();
        await LoadPersoaneAsync();
    }

    private async Task LoadUtilizatoriAsync()
    {
        _loading = true;
        _loadError = false;
        _errorMessage = "";

        try
        {
            utilizatoriList = await UtilizatorService.GetAllUtilizatoriAsync();
            utilizatoriListFiltrat = utilizatoriList;
            _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Date încărcate cu succes: {utilizatoriList.Count} utilizatori");
        }
        catch (Exception ex)
        {
            _loadError = true;
            _errorMessage = ex.Message;
            Snackbar.Add($"Eroare la încărcarea datelor: {ex.Message}", Severity.Error);
            _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPersoaneAsync()
    {
        try
        {
            var persoanaModels = await PersoanaService.GetAllPersonalAsync();
            persoane = persoanaModels.ToDTO();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Eroare la încărcarea persoanelor: {ex.Message}", Severity.Error);
        }
    }

    private Func<UtilizatorDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return x.NumeUtilizator?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.NumeComplet?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Telefon?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    };

    private async Task AdaugaUtilizator()
    {
        _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Inițiere adăugare utilizator nou");
        
        var parameters = new DialogParameters();
        parameters.Add("Persoane", persoane);
        
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AdaugaEditareUtilizatorDialog>("Adaugă utilizator nou", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            try
            {
                _loading = true;
                var createUtilizatorDTO = (CreateUtilizatorDTO)result.Data;
                
                var id = await UtilizatorService.CreateUtilizatorAsync(createUtilizatorDTO);
                
                // Reload the list after adding
                await LoadUtilizatoriAsync();
                
                Snackbar.Add("Utilizator adăugat cu succes", Severity.Success);
                _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Utilizator adăugat: {createUtilizatorDTO.NumeUtilizator}");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la adăugarea utilizatorului: {ex.Message}", Severity.Error);
                _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare: {ex.Message}");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private async Task EditareUtilizator(UtilizatorDTO utilizator)
    {
        _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Editare utilizator: {utilizator.NumeUtilizator}");
        
        var parameters = new DialogParameters();
        parameters.Add("Utilizator", utilizator);
        parameters.Add("Persoane", persoane);
        
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AdaugaEditareUtilizatorDialog>("Editează utilizator", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            try
            {
                _loading = true;
                var updateUtilizatorDTO = (UpdateUtilizatorDTO)result.Data;
                
                var success = await UtilizatorService.UpdateUtilizatorAsync(updateUtilizatorDTO);
                
                if (success)
                {
                    // Reload the list after updating
                    await LoadUtilizatoriAsync();
                    
                    Snackbar.Add("Utilizator actualizat cu succes", Severity.Success);
                    _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Utilizator actualizat: {updateUtilizatorDTO.NumeUtilizator}");
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la actualizarea utilizatorului: {ex.Message}", Severity.Error);
                _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare: {ex.Message}");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private async Task StergereUtilizator(UtilizatorDTO utilizator)
    {
        _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Ștergere utilizator: {utilizator.NumeUtilizator}");
        
        var parameters = new DialogParameters
        {
            { "ContentText", $"Sigur doriți să ștergeți utilizatorul {utilizator.NumeUtilizator}?" },
            { "ButtonText", "Șterge" },
            { "Color", Color.Error }
        };
        
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogResult = await DialogService.Show<ConfirmDialog>("Confirmare ștergere", parameters, options).Result;
        
        if (!dialogResult.Canceled)
        {
            try
            {
                _loading = true;
                var result = await UtilizatorService.DeleteUtilizatorAsync(utilizator.Id);
                
                if (result.Success)
                {
                    // Remove from the list
                    utilizatoriList.RemoveAll(u => u.Id == utilizator.Id);
                    utilizatoriListFiltrat = utilizatoriList.ToList();
                    
                    Snackbar.Add("Utilizator șters cu succes", Severity.Success);
                    _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Utilizator șters: {utilizator.NumeUtilizator}");
                }
                else
                {
                    Snackbar.Add(result.ErrorMessage, Severity.Error);
                    _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare la ștergere: {result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la ștergerea utilizatorului: {ex.Message}", Severity.Error);
                _evenimente.Insert(0, $"{DateTime.Now:HH:mm:ss} - Eroare: {ex.Message}");
            }
            finally
            {
                _loading = false;
            }
        }
    }
}
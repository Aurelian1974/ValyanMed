@page "/administrare/utilizatori"
@using System.ComponentModel.DataAnnotations
@using Client.Models
@using Client.Services
@using Client.Shared.Dialogs
@using MudBlazor
@using global::Shared.DTOs
@inject IUtilizatorService UtilizatorService
@inject IPersoanaService PersoanaService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Class="mb-4">Administrare Utilizatori</MudText>

<MudPaper Elevation="3" Class="pa-4">
    <MudToolBar Dense="true" DisableGutters="true" Class="mb-2">
        <MudText Typo="Typo.h6">Lista utilizatorilor (@utilizatoriListFiltrat.Count)</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" 
                  Color="Color.Success" 
                  StartIcon="@Icons.Material.Filled.Add" 
                  OnClick="AdaugaUtilizator" 
                  Disabled="@_loading">Adauga utilizator</MudButton>
    </MudToolBar>

    @if (_loadError)
    {
        <MudAlert Severity="Severity.Error" Class="mb-3">
            Nu s-a putut incarca lista de utilizatori. @_errorMessage
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="LoadUtilizatoriAsync" Class="ml-auto">
                Incearca din nou
            </MudButton>
        </MudAlert>
    }

    @if (utilizatoriListFiltrat.Count == 0 && !_loading && !_loadError)
    {
        <MudAlert Severity="Severity.Info" Dense="true">
            Nu exista utilizatori inregistrati.
        </MudAlert>
    }

    <MudDataGrid T="UtilizatorDTO" Items="@utilizatoriListFiltrat"
                @key="@(_refreshKey)"
                Dense="true"
                Hover="true"
                Bordered="true"
                Striped="true"
                Filterable="true"
                QuickFilter="@_quickFilter"
                SortMode="SortMode.Multiple"
                Hideable="true"
                Loading="@_loading"
                LoadingProgressColor="Color.Primary">

        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Cauta"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         IconSize="Size.Medium"
                         Class="mt-0"
                         Immediate="true" />
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="ID" Hidden="true" />
            <PropertyColumn Property="x => x.NumeUtilizator" Title="Nume Utilizator" />
            <PropertyColumn Property="x => x.Email" Title="Email" />
            <PropertyColumn Property="x => x.Telefon" Title="Telefon" />
            <PropertyColumn Property="x => x.NumeComplet" Title="Persoana Asociata" />
            <PropertyColumn Property="x => x.DataCreare" Title="Data Creare" Format="dd.MM.yyyy HH:mm:ss" />
            <PropertyColumn Property="x => x.DataModificare" Title="Data Modificare" Format="dd.MM.yyyy HH:mm:ss" />

            <PropertyColumn T="UtilizatorDTO" TProperty="string" Title="Actiuni" Sortable="false">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary"
                                  OnClick="@(() => EditareUtilizator(@context.Item))" Disabled="@_loading" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error"
                                  OnClick="@(() => StergereUtilizator(@context.Item))" Disabled="@_loading" />
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="UtilizatorDTO" PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
        <NoRecordsContent>
            <MudText>Nu au fost gasite inregistrari care sa corespunda criteriilor.</MudText>
        </NoRecordsContent>
    </MudDataGrid>
</MudPaper>

@code {
    private string _searchString = "";
    private List<UtilizatorDTO> utilizatoriList = new();
    private List<UtilizatorDTO> utilizatoriListFiltrat = new();
    private List<PersoanaDTO> persoane = new();
    private bool _loading = false;
    private bool _loadError = false;
    private string _errorMessage = "";
    private int _refreshKey = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadUtilizatoriAsync();
        await LoadPersoaneAsync();
    }

    private async Task LoadUtilizatoriAsync()
    {
        _loading = true;
        _loadError = false;
        _errorMessage = "";

        try
        {
            utilizatoriList = await UtilizatorService.GetAllUtilizatoriAsync();
            utilizatoriListFiltrat = new List<UtilizatorDTO>(utilizatoriList);
            _refreshKey++;
        }
        catch (Exception ex)
        {
            _loadError = true;
            _errorMessage = ex.Message;
            Snackbar.Add($"Eroare la incarcarea datelor: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPersoaneAsync()
    {
        try
        {
            var persoanaModels = await PersoanaService.GetAllPersonalAsync();
            persoane = persoanaModels.ToDTO();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Eroare la incarcarea persoanelor: {ex.Message}", Severity.Error);
        }
    }

    private Func<UtilizatorDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return x.NumeUtilizator?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.NumeComplet?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Telefon?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    };

    private async Task AdaugaUtilizator()
    {
        var parameters = new DialogParameters();
        parameters.Add("Persoane", persoane);
        
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AdaugaEditareUtilizatorDialog>("Adauga utilizator nou", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            try
            {
                _loading = true;
                var createUtilizatorDTO = (CreateUtilizatorDTO)result.Data;
                
                var id = await UtilizatorService.CreateUtilizatorAsync(createUtilizatorDTO);
                
                await LoadUtilizatoriAsync();
                
                Snackbar.Add("Utilizator adaugat cu succes", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la adaugarea utilizatorului: {ex.Message}", Severity.Error);
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private async Task EditareUtilizator(UtilizatorDTO utilizator)
    {
        var parameters = new DialogParameters();
        parameters.Add("Utilizator", utilizator);
        parameters.Add("Persoane", persoane);
        
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AdaugaEditareUtilizatorDialog>("Editeaza utilizator", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            try
            {
                _loading = true;
                var updateUtilizatorDTO = (UpdateUtilizatorDTO)result.Data;
                
                try
                {
                    var success = await UtilizatorService.UpdateUtilizatorAsync(updateUtilizatorDTO);
                    
                    if (success)
                    {
                        utilizatoriList.Clear();
                        utilizatoriListFiltrat = new List<UtilizatorDTO>();
                        _refreshKey++;
                        StateHasChanged();
                        
                        await LoadUtilizatoriAsync();
                        
                        StateHasChanged();
                        
                        Snackbar.Add("Utilizator actualizat cu succes", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Actualizarea utilizatorului a esuat", Severity.Error);
                    }
                }
                catch (HttpRequestException httpEx)
                {
                    Snackbar.Add($"Eroare HTTP: {httpEx.StatusCode} - {httpEx.Message}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la actualizarea utilizatorului: {ex.Message}", Severity.Error);
            }
            finally
            {
                _loading = false;
                StateHasChanged();
            }
        }
    }

    private async Task StergereUtilizator(UtilizatorDTO utilizator)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Sigur doriti sa stergeti utilizatorul {utilizator.NumeUtilizator}?" },
            { "ButtonText", "Sterge" },
            { "Color", Color.Error }
        };
        
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogResult = await DialogService.Show<ConfirmDialog>("Confirmare stergere", parameters, options).Result;
        
        if (!dialogResult.Canceled)
        {
            try
            {
                _loading = true;
                var result = await UtilizatorService.DeleteUtilizatorAsync(utilizator.Id);
                
                if (result.Success)
                {
                    utilizatoriList.RemoveAll(u => u.Id == utilizator.Id);
                    utilizatoriListFiltrat = utilizatoriList.ToList();
                    
                    Snackbar.Add("Utilizator sters cu succes", Severity.Success);
                }
                else
                {
                    Snackbar.Add(result.ErrorMessage, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la stergerea utilizatorului: {ex.Message}", Severity.Error);
            }
            finally
            {
                _loading = false;
            }
        }
    }
}
@page "/administrare/parteneri"
@using System.ComponentModel.DataAnnotations
@using Client.Models
@using Client.Extensions
@using Client.Services
@using Client.Shared.Dialogs
@using MudBlazor
@using global::Shared.DTOs
@inject IPartenerService PartenerService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Class="mb-4">Administrare Parteneri</MudText>

<MudPaper Elevation="3" Class="pa-4">
    <MudToolBar Dense="true" DisableGutters="true" Class="mb-2">
        <MudText Typo="Typo.h6">Lista partenerilor (@parteneriListFiltrat.Count)</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" 
                  OnClick="AdaugaPartener" Disabled="@_loading">Adauga partener</MudButton>
    </MudToolBar>

    @if (_loadError)
    {
        <MudAlert Severity="Severity.Error" Class="mb-3">
            Nu s-a putut incarca lista de parteneri. @_errorMessage
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="LoadParteneriAsync" Class="ml-auto">
                Incearca din nou
            </MudButton>
        </MudAlert>
    }

    @if (parteneriListFiltrat.Count == 0 && !_loading && !_loadError)
    {
        <MudAlert Severity="Severity.Info" Dense="true">
            Nu exista parteneri inregistrati.
        </MudAlert>
    }

    <!-- MudBlazor DataGrid -->
    <MudDataGrid T="PartenerModel" Items="@parteneriListFiltrat"
        MultiSelection="true"
        Dense="true"
        Hover="true"
        Bordered="true"
        Striped="true"
        Filterable="true"
        QuickFilter="@_quickFilter"
        SortMode="SortMode.Multiple"
        Hideable="true"
        Loading="@_loading"
        LoadingProgressColor="Color.Primary">

        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Cauta"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0"
                          Immediate="true" />
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="PartenerModel" />
            <PropertyColumn Property="x => x.PartenerId" Title="ID" Hidden="true" />
            <PropertyColumn Property="x => x.PartenerGuid" Title="GUID" Hidden="true" />
            <PropertyColumn Property="x => x.CodIntern" Title="Cod Intern" Filterable="true" SortBy="x => x.CodIntern" Groupable="true" />
            <PropertyColumn Property="x => x.Denumire" Title="Denumire" Filterable="true" SortBy="x => x.Denumire" Groupable="true" />
            <PropertyColumn Property="x => x.CodFiscal" Title="Cod Fiscal" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.Judet" Title="Judet" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.Localitate" Title="Localitate" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.DataCreare" Title="Data Creare" Format="dd.MM.yyyy" Filterable="true" Groupable="true" />
            <PropertyColumn Property="x => x.DataActualizare" Title="Data Actualizare" Format="dd.MM.yyyy HH:mm:ss" Filterable="true" Groupable="true" />

            <!-- Coloane ascunse pentru grupare -->
            <PropertyColumn Property="x => x.Adresa" Title="Adresa" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.UtilizatorCreare" Title="Utilizator Creare" Hidden="true" Groupable="true" />
            <PropertyColumn Property="x => x.UtilizatorActualizare" Title="Utilizator Actualizare" Hidden="true" Groupable="true" />
            
            <PropertyColumn T="PartenerModel" TProperty="bool" Property="x => x.Activ" Title="Status" Sortable="true" Filterable="true">
                <CellTemplate>
                    <MudChip Size="Size.Small" 
                             Color="@(context.Item.Activ ? Color.Success : Color.Error)"
                             Text="@(context.Item.Activ ? "Activ" : "Inactiv")" />
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn T="PartenerModel" TProperty="string" Title="Actiuni" Sortable="false">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                  Size="Size.Small" 
                                  Color="Color.Primary"
                                  OnClick="@(() => EditarePartener(@context.Item))" 
                                  Disabled="@_loading"
                                  Title="Editeaza" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                  Size="Size.Small" 
                                  Color="Color.Error"
                                  OnClick="@(() => StergerePartener(@context.Item))" 
                                  Disabled="@_loading"
                                  Title="Sterge" />
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                  Size="Size.Small" 
                                  Color="Color.Info"
                                  OnClick="@(() => VizualizarePartener(@context.Item))" 
                                  Disabled="@_loading"
                                  Title="Vizualizeaza" />
                </CellTemplate>
            </PropertyColumn>
        </Columns>

        <ChildRowContent>
            <MudPaper Class="pa-4" Elevation="0" Style="background: #f9f9f9;">
                <MudText Typo="Typo.subtitle2">Detalii suplimentare</MudText>
                <MudDivider Class="mb-2" />
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudText><b>Cod Intern:</b> @context.Item.CodIntern</MudText>
                        <MudText><b>Cod Fiscal:</b> @(context.Item.CodFiscal ?? "N/A")</MudText>
                        <MudText><b>Judet:</b> @(context.Item.Judet ?? "N/A")</MudText>
                        <MudText><b>Localitate:</b> @(context.Item.Localitate ?? "N/A")</MudText>
                        <MudText><b>Adresa:</b> @(context.Item.Adresa ?? "N/A")</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText><b>Data Creare:</b> @FormatDate(context.Item.DataCreare)</MudText>
                        <MudText><b>Data Actualizare:</b> @FormatDateTime(context.Item.DataActualizare)</MudText>
                        <MudText><b>Utilizator Creare:</b> @(context.Item.UtilizatorCreare ?? "N/A")</MudText>
                        <MudText><b>Utilizator Actualizare:</b> @(context.Item.UtilizatorActualizare ?? "N/A")</MudText>
                        <MudText><b>GUID:</b> @context.Item.PartenerGuid</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </ChildRowContent>

        <PagerContent>
            <MudDataGridPager T="PartenerModel" PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
        <NoRecordsContent>
            <MudText>Nu au fost gasite inregistrari care sa corespunda criteriilor.</MudText>
        </NoRecordsContent>
    </MudDataGrid>
</MudPaper>

@code {
    private string _searchString = "";
    private List<PartenerModel> parteneriList = new();
    private List<PartenerModel> parteneriListFiltrat = new();
    private bool _loading = false;
    private bool _loadError = false;
    private string _errorMessage = "";
    private string deleteError = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadParteneriAsync();
    }

    private async Task LoadParteneriAsync()
    {
        _loading = true;
        _loadError = false;
        _errorMessage = "";
        deleteError = "";

        try
        {
            var parteneriDto = await PartenerService.GetAllParteneriAsync();
            parteneriList = parteneriDto.ToModelList();
            parteneriListFiltrat = parteneriList;
        }
        catch (Exception ex)
        {
            _loadError = true;
            _errorMessage = ex.Message;
            Snackbar.Add($"Eroare la incarcarea datelor: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private string FormatDate(DateTime date)
    {
        return date.ToString("dd.MM.yyyy");
    }

    private string FormatDateTime(DateTime date)
    {
        return date.ToString("dd.MM.yyyy HH:mm:ss");
    }

    private Func<PartenerModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return x.CodIntern?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Denumire?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.CodFiscal?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Judet?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Localitate?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
            || x.Adresa?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    };

    async Task AdaugaPartener()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AdaugaEditarePartenerDialog>("Adauga partener nou", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            var newPartener = (PartenerModel)result.Data;
            try
            {
                _loading = true;
                var createPartenerDTO = newPartener.ToCreateDto();
                var createdId = await PartenerService.CreatePartenerAsync(createPartenerDTO);
                newPartener.PartenerId = createdId;
                parteneriList.Add(newPartener);
                parteneriListFiltrat = parteneriList;
                Snackbar.Add("Partener adaugat cu succes", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la adaugarea partenerului: {ex.Message}", Severity.Error);
            }
            finally
            {
                _loading = false;
            }
        }
    }

    async Task EditarePartener(PartenerModel partener)
    {
        var parameters = new DialogParameters();
        parameters.Add("Partener", partener);
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AdaugaEditarePartenerDialog>("Editeaza partener", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            var updatedPartener = (PartenerModel)result.Data;
            try
            {
                _loading = true;
                var updateDto = updatedPartener.ToUpdateDto();
                var success = await PartenerService.UpdatePartenerAsync(updateDto);
                if (success)
                {
                    var index = parteneriList.FindIndex(p => p.PartenerId == updatedPartener.PartenerId);
                    if (index >= 0)
                    {
                        parteneriList[index] = updatedPartener;
                        parteneriListFiltrat = parteneriList;
                    }
                    Snackbar.Add("Partener actualizat cu succes", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la actualizarea partenerului: {ex.Message}", Severity.Error);
            }
            finally
            {
                _loading = false;
            }
        }
    }

    async Task StergerePartener(PartenerModel partener)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Sigur doriti sa stergeti partenerul {partener.Denumire}?" },
            { "ButtonText", "Sterge" },
            { "Color", Color.Error }
        };
        
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogResult = await DialogService.Show<ConfirmDialog>("Confirmare stergere", parameters, options).Result;
        
        if (!dialogResult.Canceled)
        {
            try
            {
                _loading = true;
                var result = await PartenerService.DeletePartenerAsync(partener.PartenerId);
                if (result.Success)
                {
                    parteneriList.Remove(partener);
                    parteneriListFiltrat = parteneriList.ToList();
                    Snackbar.Add("Partener sters cu succes", Severity.Success);
                }
                else
                {
                    deleteError = result.ErrorMessage;
                    Snackbar.Add(deleteError, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Eroare la stergerea partenerului: {ex.Message}", Severity.Error);
            }
            finally
            {
                _loading = false;
            }
        }
    }

    void VizualizarePartener(PartenerModel partener)
    {
        var parameters = new DialogParameters();
        parameters.Add("Partener", partener);
        parameters.Add("ReadOnly", true);
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<AdaugaEditarePartenerDialog>($"Detalii partener: {partener.Denumire}", parameters, options);
    }
}
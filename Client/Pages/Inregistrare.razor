@page "/inregistrare"
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@using ValyanMed.Client.Models
@using ValyanMed.Client.Services
@using ValyanMed.Client.Validators


<MudPaper Class="signin-container" Elevation="3" Square="false">
    <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="0" Class="title-row">
        <img src="images/valyanmed-logo.png" alt="ValyanMed Logo" class="logo-img-inline" />
        <MudText Typo="Typo.h4" Class="signin-title" GutterBottom="false" Bold="true">
            Create New Account
        </MudText>
    </MudStack>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <MudAlert Severity="MudBlazor.Severity.Error" Class="mb-4">
            @_errorMessage
        </MudAlert>
    }

    <MudForm Model="@_registerModel" @ref="_form" Validation="@(_registerValidator.ValidateValue)" ValidationDelay="0">
        <MudValidationSummary />

        <MudTextField @bind-Value="_registerModel.NumeUtilizator"
                      For="@(() => _registerModel.NumeUtilizator)"
                      Immediate="true"
                      Label="Nume utilizator"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField @bind-Value="_registerModel.Email"
                      For="@(() => _registerModel.Email)"
                      Immediate="true"
                      Label="Email"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField @bind-Value="_registerModel.Parola"
                      For="@(() => _registerModel.Parola)"
                      Immediate="true"
                      Label="Parola"
                      Variant="Variant.Outlined"
                      InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                      Class="mb-4"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                      OnAdornmentClick="TogglePasswordVisibility" />

        <MudTextField @bind-Value="_registerModel.ConfirmaParola"
                      For="@(() => _registerModel.ConfirmaParola)"
                      Immediate="true"
                      Label="Confirma Parola"
                      Variant="Variant.Outlined"
                      InputType="@(_showConfirmPassword ? InputType.Text : InputType.Password)"
                      Class="mb-4"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                      OnAdornmentClick="ToggleConfirmPasswordVisibility" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="signin-btn"
                   ButtonType="ButtonType.Submit"
                   FullWidth="true"
                   Disabled="_isLoading"
                   OnClick="@(async () => await Submit())">
            @if (_isLoading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Se procesează...</MudText>
            }
            else
            {
                <MudText>Înregistrare</MudText>
            }
        </MudButton>
    </MudForm>

    <MudStack Direction="Row" Justify="Justify.FlexStart" Class="back-btn-container">
        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   OnClick="GoBack"
                   Class="back-btn">
            ÎNAPOI
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    private MudForm _form;
    private string _errorMessage;
    private bool _showPassword;
    private bool _showConfirmPassword;
    private bool _isLoading;
    private RegisterModel _registerModel = new();
    private RegisterModelValidator _registerValidator = new();

    private async Task Submit()
    {
        _isLoading = true;
        _errorMessage = string.Empty;
        await _form.Validate();

        if (_form.IsValid)
        {
            try
            {
                var model = new UtilizatorRegisterDto
                {
                    NumeUtilizator = _registerModel.NumeUtilizator,
                    Parola = _registerModel.Parola,
                    Email = _registerModel.Email,
                    PersoanaId = 1
                };

                var (success, message) = await AuthService.Register(model);

                if (success)
                {
                    Snackbar.Add(message, MudBlazor.Severity.Success);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    _errorMessage = message;
                    Snackbar.Add($"Eroare la înregistrare: {_errorMessage}", MudBlazor.Severity.Error);
                }
            }
            catch (Exception ex)
            {
                _errorMessage = $"A apărut o eroare: {ex.Message}";
                Snackbar.Add(_errorMessage, MudBlazor.Severity.Error);
            }
        }
        _isLoading = false;
        StateHasChanged();
    }

    void TogglePasswordVisibility() => _showPassword = !_showPassword;
    void ToggleConfirmPasswordVisibility() => _showConfirmPassword = !_showConfirmPassword;
    void GoBack() => Navigation.NavigateTo("/");
}


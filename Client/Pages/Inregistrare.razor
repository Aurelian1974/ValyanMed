@page "/inregistrare"
@using System.ComponentModel.DataAnnotations
@using Client.Services
@using Client.Validators
@using FluentValidation
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IPersoanaService PersoanaService
@using Client.Models
@using global::Shared.DTOs

@using Client.Shared.Dialogs

<MudPaper Class="signin-container" Elevation="3" Square="false">
    <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="0" Class="title-row">
        <img src="images/valyanmed-logo.png" alt="ValyanMed Logo" class="logo-img-inline" />
        <MudText Typo="Typo.h4" Class="signin-title" GutterBottom="false" Bold="true">
            Create New Account
        </MudText>
    </MudStack>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <MudAlert Severity="MudBlazor.Severity.Error" Class="mb-4">
            @_errorMessage
        </MudAlert>
    }

    <MudForm Model="@_registerModel" @ref="_form" Validation="@(_registerValidator.ValidateValue)" ValidationDelay="0">
        <MudValidationSummary />

        <MudTextField @bind-Value="_registerModel.NumeUtilizator"
                      For="@(() => _registerModel.NumeUtilizator)"
                      Immediate="true"
                      Label="Nume utilizator"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField @bind-Value="_registerModel.Email"
                      For="@(() => _registerModel.Email)"
                      Immediate="true"
                      Label="Email"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <!-- Person selection with Add New Person button -->
        <MudGrid Class="mb-4">
            <MudItem xs="10">
                <MudSelect T="PersoanaDTO" 
                          Label="Selectează persoana" 
                          @bind-Value="_selectedPersoana"
                          Variant="Variant.Outlined"
                          AnchorOrigin="Origin.BottomCenter"
                          Required="true"
                          Style="width: 100%;">
                    @if (_persoane != null)
                    {
                        @foreach (var persoana in _persoane)
                        {
                            <MudSelectItem Value="@persoana">@($"{persoana.Nume} {persoana.Prenume}")</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="2" Style="display: flex; align-items: center;">
                <MudIconButton Icon="@Icons.Material.Filled.PersonAdd" 
                              Color="Color.Primary" 
                              OnClick="@(async () => await AdaugaPersoana())" 
                              Title="Adaugă persoană nouă"
                              Disabled="@_isLoading"
                              Style="margin-top: 10px;" />
            </MudItem>
        </MudGrid>
                        
        <MudTextField @bind-Value="_registerModel.Parola"
                      For="@(() => _registerModel.Parola)"
                      Immediate="true"
                      Label="Parola"
                      Variant="Variant.Outlined"
                      InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                      Class="mb-4"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                      OnAdornmentClick="TogglePasswordVisibility" />

        <MudTextField @bind-Value="_registerModel.ConfirmaParola"
                      For="@(() => _registerModel.ConfirmaParola)"
                      Immediate="true"
                      Label="Confirma Parola"
                      Variant="Variant.Outlined"
                      InputType="@(_showConfirmPassword ? InputType.Text : InputType.Password)"
                      Class="mb-4"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                      OnAdornmentClick="ToggleConfirmPasswordVisibility" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="signin-btn"
                   ButtonType="ButtonType.Submit"
                   FullWidth="true"
                   Disabled="_isLoading"
                   OnClick="@(async () => await Submit())">
            @if (_isLoading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Se procesează...</MudText>
            }
            else
            {
                <MudText>Înregistrare</MudText>
            }
        </MudButton>
    </MudForm>

    <MudStack Direction="Row" Justify="Justify.FlexStart" Class="back-btn-container">
        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   OnClick="GoBack"
                   Class="back-btn">
            ÎNAPOI
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    private MudForm _form;
    private string _errorMessage;
    private bool _showPassword;
    private bool _showConfirmPassword;
    private bool _isLoading;
    private RegisterModel _registerModel = new();
    private RegisterModelValidator _registerValidator = new();
    private PersoanaDTO _selectedPersoana;
    private List<PersoanaDTO> _persoane = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadPersoane();
    }

    private async Task LoadPersoane()
    {
        try
        {
            _persoane = await Http.GetFromJsonAsync<List<PersoanaDTO>>("api/persoane") ?? new List<PersoanaDTO>();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Eroare la încărcarea persoanelor: {ex.Message}";
            Snackbar.Add(_errorMessage, MudBlazor.Severity.Error);
        }
    }

    private async Task AdaugaPersoana()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AdaugaEditareAngajatDialog>("Adaugă persoană nouă", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // Get the model from the dialog
                var newPersoana = (PersoanaModel)result.Data;

                // Map the model to DTO
                var createPersoanaDTO = MapToCreateDto(newPersoana);

                // Save the new person to the database
                var createdPersoana = await PersoanaService.CreatePersoanaAsync(createPersoanaDTO);

                // Adaugă direct în listă și selectează
                _persoane.Add(createdPersoana);
                _selectedPersoana = createdPersoana;

                // (opțional) Forțează refresh UI
                StateHasChanged();

                Snackbar.Add("Persoana a fost adăugată cu succes", MudBlazor.Severity.Success);
            }
            catch (Exception ex)
            {
                _errorMessage = $"Eroare la adăugarea persoanei: {ex.Message}";
                Snackbar.Add(_errorMessage, MudBlazor.Severity.Error);
            }
        }
    }

    private CreatePersoanaDTO MapToCreateDto(PersoanaModel newPersoana)
    {
        return new CreatePersoanaDTO
        {
            Nume = newPersoana.Nume,
            Prenume = newPersoana.Prenume,
            Judet = newPersoana.Judet,
            Localitate = newPersoana.Localitate,
            Strada = newPersoana.Strada,
            NumarStrada = newPersoana.NumarStrada,
            CodPostal = newPersoana.CodPostal,
            PozitieOrganizatie = newPersoana.PozitieOrganizatie,
            DataNasterii = newPersoana.DataNasterii,
            CNP = newPersoana.CNP,
            TipActIdentitate = newPersoana.TipActIdentitate,
            SerieActIdentitate = newPersoana.SerieActIdentitate,
            NumarActIdentitate = newPersoana.NumarActIdentitate,
            StareCivila = newPersoana.StareCivila,
            Gen = newPersoana.Gen,
            Specialitate = newPersoana.Specialitate,
            Departament = newPersoana.Departament,
            DataAngajarii = newPersoana.DataAngajarii,
            Status = newPersoana.Status
        };
    }

    private async Task Submit()
    {
        _isLoading = true;
        _errorMessage = string.Empty;
        await _form.Validate();

        if (_form.IsValid)
        {
            if (_selectedPersoana == null)
            {
                _errorMessage = "Trebuie să selectați o persoană";
                _isLoading = false;
                return;
            }

            try
            {
                var model = new UtilizatorRegisterDto
                {
                    NumeUtilizator = _registerModel.NumeUtilizator,
                    Parola = _registerModel.Parola,
                    Email = _registerModel.Email,
                    PersoanaId = _selectedPersoana.Id
                };

                var (success, message) = await AuthService.Register(model);

                if (success)
                {
                    Snackbar.Add(message, MudBlazor.Severity.Success);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    _errorMessage = message;
                    Snackbar.Add($"Eroare la înregistrare: {_errorMessage}", MudBlazor.Severity.Error);
                }
            }
            catch (Exception ex)
            {
                _errorMessage = $"A apărut o eroare: {ex.Message}";
                Snackbar.Add(_errorMessage, MudBlazor.Severity.Error);
            }
        }
        _isLoading = false;
        StateHasChanged();
    }

    void TogglePasswordVisibility() => _showPassword = !_showPassword;
    void ToggleConfirmPasswordVisibility() => _showConfirmPassword = !_showConfirmPassword;
    void GoBack() => Navigation.NavigateTo("/");
}


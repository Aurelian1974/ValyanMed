@page "/utilizatori"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Gestionare Utilizatori - ValyanMed</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Header Section -->
    <MudStack Spacing="3">
        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h4">Gestionare Utilizatori</MudText>
            <MudButton StartIcon="@Icons.Material.Filled.Add" 
                      Color="Color.Primary" 
                      Variant="Variant.Filled"
                      OnClick="@(() => OpenUserDialog())">
                Adauga Utilizator
            </MudButton>
        </MudStack>

        <!-- Search and Filters -->
        <MudPaper Class="pa-4">
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                <MudTextField @bind-Value="searchTerm" 
                             Label="Cauta utilizatori..." 
                             Variant="Variant.Outlined" 
                             Adornment="Adornment.End" 
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             OnAdornmentClick="@(() => FilterUsersAsync())"
                             OnKeyUp="@OnSearchKeyUp"
                             Immediate="false"
                             Class="flex-grow-1" />

                <MudButton StartIcon="@Icons.Material.Filled.Refresh" 
                          Color="Color.Secondary" 
                          Variant="Variant.Outlined"
                          OnClick="@ResetFiltersAsync">
                    Reset
                </MudButton>
            </MudStack>
        </MudPaper>

        <!-- Results Summary -->
        @if (!loading && utilizatori != null)
        {
            <MudAlert Severity="Severity.Info" Dense="true">
                Afisati: @filteredUsers.Count() din @utilizatori.Count() utilizatori totali
            </MudAlert>
        }

        <!-- Data Grid -->
        <MudDataGrid T="Utilizator" 
                    Items="@filteredUsers" 
                    Loading="@loading"
                    Dense="true"
                    Hover="true"
                    ReadOnly="true"
                    Filterable="false"
                    Hideable="true"
                    ColumnResizeMode="ResizeMode.Container"
                    SortMode="SortMode.Multiple">
            
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="ID" Sortable="true" />
                <PropertyColumn Property="x => x.NumeUtilizator" Title="Nume Utilizator" Sortable="true" />
                <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" />
                <PropertyColumn Property="x => x.NumeComplet" Title="Nume Complet" Sortable="true" />
                
                <TemplateColumn Title="Telefon" Sortable="true" SortBy="@(x => x.Telefon)">
                    <CellTemplate>
                        @if (!string.IsNullOrEmpty(context.Item.Telefon))
                        {
                            @context.Item.Telefon
                        }
                        else
                        {
                            <MudText Color="Color.Surface">-</MudText>
                        }
                    </CellTemplate>
                </TemplateColumn>
                
                <TemplateColumn Title="Data Creare" Sortable="true" SortBy="@(x => x.DataCreare)">
                    <CellTemplate>
                        @if (context.Item.DataCreare.HasValue)
                        {
                            @context.Item.DataCreare.Value.ToString("dd.MM.yyyy HH:mm")
                        }
                        else
                        {
                            <MudText Color="Color.Surface">-</MudText>
                        }
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="Actiuni" Sortable="false" Filterable="false">
                    <CellTemplate>
                        <MudStack Row Spacing="1">
                            <MudTooltip Text="Editeaza utilizator">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                              Size="Size.Small" 
                                              Color="Color.Primary"
                                              OnClick="@(() => OpenUserDialog(context.Item))" />
                            </MudTooltip>
                            <MudTooltip Text="Sterge utilizator">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                              Size="Size.Small" 
                                              Color="Color.Error"
                                              OnClick="@(() => DeleteUserAsync(context.Item))" />
                            </MudTooltip>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            <NoRecordsContent>
                <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="pa-8">
                    <MudIcon Icon="@Icons.Material.Filled.ManageAccounts" Size="Size.Large" Color="Color.Surface" />
                    <MudText Typo="Typo.body1" Color="Color.Surface">
                        @if (string.IsNullOrEmpty(searchTerm))
                        {
                            @:Nu au fost gasiti utilizatori
                        }
                        else
                        {
                            @:Nu au fost gasiti utilizatori care sa corespunda criteriilor de cautare
                        }
                    </MudText>
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <MudButton StartIcon="@Icons.Material.Filled.ClearAll" OnClick="@ResetFiltersAsync">
                            Reseteaza filtrele
                        </MudButton>
                    }
                </MudStack>
            </NoRecordsContent>

            <LoadingContent>
                <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="pa-8">
                    <MudProgressCircular Indeterminate="true" />
                    <MudText Typo="Typo.body1">Se incarca utilizatorii...</MudText>
                </MudStack>
            </LoadingContent>
        </MudDataGrid>
    </MudStack>
</MudContainer>

@code {
    private List<Utilizator> utilizatori = new();
    private string searchTerm = string.Empty;
    private bool loading = false;
    private Timer? searchTimer;
    
    private IEnumerable<Utilizator> filteredUsers => FilterUsers();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
    
    private async Task LoadUsersAsync()
    {
        loading = true;
        StateHasChanged();
        
        try
        {
            var response = await Http.GetAsync("api/utilizatori");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<Utilizator>>();
                utilizatori = result ?? new List<Utilizator>();
                
                ShowSuccess("Utilizatorii au fost incarcati cu succes");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorResponse = System.Text.Json.JsonSerializer.Deserialize<ErrorResponse>(errorContent);
                ShowError($"Eroare la incarcarea utilizatorilor: {errorResponse?.Message ?? response.ReasonPhrase}");
            }
        }
        catch (HttpRequestException ex)
        {
            ShowError($"Eroare de conectare: {ex.Message}");
        }
        catch (TaskCanceledException)
        {
            ShowError("Cererea a expirat. Va rugam incercati din nou.");
        }
        catch (System.Text.Json.JsonException ex)
        {
            ShowError($"Eroare la procesarea datelor: {ex.Message}");
        }
        catch (Exception ex)
        {
            ShowError($"Eroare neasteptata: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
    
    private IEnumerable<Utilizator> FilterUsers()
    {
        var filtered = utilizatori.AsEnumerable();
        
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var search = searchTerm.ToLowerInvariant();
            filtered = filtered.Where(u => 
                u.NumeUtilizator.ToLowerInvariant().Contains(search) ||
                u.Email.ToLowerInvariant().Contains(search) ||
                u.NumeComplet.ToLowerInvariant().Contains(search) ||
                (u.Telefon?.ToLowerInvariant().Contains(search) ?? false));
        }
        
        return filtered.OrderBy(u => u.NumeUtilizator);
    }
    
    private async Task FilterUsersAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task ResetFiltersAsync()
    {
        searchTerm = string.Empty;
        await FilterUsersAsync();
    }
    
    private void OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _ = FilterUsersAsync();
            return;
        }
        
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                await FilterUsersAsync();
            });
        }, null, TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(-1));
    }
    
    private async Task OpenUserDialog(Utilizator? utilizator = null)
    {
        var parameters = new DialogParameters<UserDialog>();
        if (utilizator != null)
        {
            parameters.Add(x => x.Utilizator, utilizator);
            parameters.Add(x => x.IsEditMode, true);
        }
        else
        {
            parameters.Add(x => x.IsEditMode, false);
        }

        var options = new DialogOptions 
        { 
            MaxWidth = MaxWidth.Medium, 
            FullWidth = true,
            BackdropClick = false,
            CloseOnEscapeKey = false
        };

        var dialog = await DialogService.ShowAsync<UserDialog>(
            utilizator == null ? "Adauga Utilizator Nou" : $"Editeaza Utilizator: {utilizator.NumeUtilizator}",
            parameters,
            options);

        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await LoadUsersAsync();
        }
    }
    
    private async Task DeleteUserAsync(Utilizator utilizator)
    {
        var confirmed = await ShowConfirmDialog(
            "Confirmare Stergere",
            $"Sunteti sigur ca doriti sa stergeti utilizatorul '{utilizator.NumeUtilizator}'?",
            "Aceasta actiune nu poate fi anulata.");

        if (!confirmed) return;

        loading = true;
        StateHasChanged();

        try
        {
            var response = await Http.DeleteAsync($"api/utilizatori/{utilizator.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                ShowSuccess($"Utilizatorul '{utilizator.NumeUtilizator}' a fost sters cu succes");
                await LoadUsersAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorResponse = System.Text.Json.JsonSerializer.Deserialize<ErrorResponse>(errorContent);
                ShowError($"Eroare la stergerea utilizatorului: {errorResponse?.Message ?? response.ReasonPhrase}");
            }
        }
        catch (HttpRequestException ex)
        {
            ShowError($"Eroare de conectare: {ex.Message}");
        }
        catch (Exception ex)
        {
            ShowError($"Eroare neasteptata: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
    
    private void ShowSuccess(string message)
    {
        Snackbar.Add(message, Severity.Success, configure => {
            configure.VisibleStateDuration = 3000;
            configure.ShowTransitionDuration = 200;
            configure.HideTransitionDuration = 200;
        });
    }
    
    private void ShowError(string message)
    {
        Snackbar.Add(message, Severity.Error, configure => {
            configure.VisibleStateDuration = 5000;
            configure.ShowTransitionDuration = 200;
            configure.HideTransitionDuration = 200;
            configure.RequireInteraction = true;
        });
    }
    
    private async Task<bool> ShowConfirmDialog(string title, string message, string? subText = null)
    {
        var parameters = new DialogParameters<ConfirmDialog>();
        parameters.Add(x => x.Title, title);
        parameters.Add(x => x.ContentText, message);
        if (!string.IsNullOrEmpty(subText))
        {
            parameters.Add(x => x.SubText, subText);
        }
        parameters.Add(x => x.ButtonText, "Sterge");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(title, parameters, options);
        var result = await dialog.Result;
        
        return result is not null && !result.Canceled;
    }
    
    private record ErrorResponse(string Message, List<string>? Errors = null);
}
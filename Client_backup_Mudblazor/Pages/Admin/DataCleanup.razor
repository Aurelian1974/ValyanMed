@page "/admin/data-cleanup"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IJsonService JsonService
@using Client.Services

<PageTitle>Data Cleanup - ValyanMed</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" GutterBottom="true">?? Data Cleanup & Diagnostics</MudText>
        
        <MudAlert Severity="MudSeverity.Warning">
            <strong>?? ATEN?IE:</strong> Aceast? pagin? este destinat? administr?rii datelor. 
            Opera?iunile de cur??are vor modifica datele din baza de date de mod permanent.
        </MudAlert>
        
        <MudStack Spacing="4" Class="mt-4">
            
            <!-- Diagnostic Section -->
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel>
                    <TitleContent>
                        <div style="display: flex; align-items: center">
                            <MudIcon Icon="@Icons.Material.Filled.Analytics" class="mr-3" />
                            <span>?? Diagnostic Date Legacy</span>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudStack Spacing="3">
                            <MudText>
                                Acest diagnostic identific? valorile problematice în baza de date care ar putea cauza erori în aplica?ie.
                            </MudText>
                            
                            <MudStack Row Spacing="2">
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Info" 
                                          OnClick="RunDiagnostic"
                                          Disabled="@_isRunningDiagnostic"
                                          StartIcon="@(_isRunningDiagnostic ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Search)">
                                    @if (_isRunningDiagnostic)
                                    {
                                        @:Ruleaz? diagnostic...
                                    }
                                    else
                                    {
                                        @:Ruleaz? Diagnostic
                                    }
                                </MudButton>
                                
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Secondary" 
                                          OnClick="LoadTestData"
                                          Disabled="@_isLoadingTestData">
                                    Test Load Data
                                </MudButton>
                            </MudStack>
                            
                            @if (!string.IsNullOrEmpty(_diagnosticResults))
                            {
                                <MudAlert Severity="MudSeverity.Info">
                                    <strong>Rezultate Diagnostic:</strong>
                                </MudAlert>
                                <MudTextField Label="Rezultate Diagnostic" 
                                             Value="@_diagnosticResults" 
                                             ReadOnly="true" 
                                             Variant="Variant.Outlined"
                                             Lines="15" />
                            }
                        </MudStack>
                    </ChildContent>
                </MudExpansionPanel>
                
                <!-- Cleanup Section -->
                <MudExpansionPanel>
                    <TitleContent>
                        <div style="display: flex; align-items: center">
                            <MudIcon Icon="@Icons.Material.Filled.CleaningServices" class="mr-3" />
                            <span>?? Cur??are Date Legacy</span>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudStack Spacing="3">
                            <MudAlert Severity="MudSeverity.Warning">
                                <strong>ATEN?IE:</strong> Aceast? opera?iune va modifica permanent datele din baza de date!
                                <br />Asigura?i-v? c? ave?i un backup înainte de a continua.
                            </MudAlert>
                            
                            <MudAlert Severity="MudSeverity.Warning">
                                <strong>ACTUALIZARE:</strong> Detectat? problema de truncare din baza de date!
                                <br /><strong>Solu?ia aplicat?:</strong> Folosim valori scurte compatibile (CI, Pasaport, Permis, etc.)
                                <br />Aceast? opera?iune va normaliza datele f?r? a modifica structura bazei de date.
                            </MudAlert>
                            
                            <MudText>
                                Script-ul de cur??are optimizat va normaliza urm?toarele valori:
                                <br />• <strong>TipActIdentitate:</strong> orice variante ? 'CI', 'Pasaport', 'Permis', 'Certificat', 'Altul'
                                <br />• <strong>StareCivila:</strong> orice variante ? 'Celibatar', 'Casatorit', 'Divortit', 'Vaduv', 'Partener'
                                <br />• <strong>Gen:</strong> orice variante ? 'M', 'F', 'N'
                                <br />• <strong>Avantaj:</strong> Valorile scurte se încadreaz? în orice m?rime de coloan?
                            </MudText>
                            
                            <MudStack Row Spacing="2">
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Warning" 
                                          OnClick="RunCleanup"
                                          Disabled="@(_isRunningCleanup || !_cleanupConfirmed)"
                                          StartIcon="@(_isRunningCleanup ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.CleaningServices)">
                                    @if (_isRunningCleanup)
                                    {
                                        @:Ruleaz? cur??are...
                                    }
                                    else
                                    {
                                        @:Ruleaz? Cur??are
                                    }
                                </MudButton>
                                
                                <MudCheckBox @bind-Value="_cleanupConfirmed" 
                                           Label="Confirm c? am backup ?i vreau s? continui" 
                                           Color="Color.Warning" />
                            </MudStack>
                            
                            @if (!string.IsNullOrEmpty(_cleanupResults))
                            {
                                <MudAlert Severity="@(_cleanupSuccess ? MudSeverity.Success : MudSeverity.Error)">
                                    <strong>Rezultate Cur??are:</strong>
                                </MudAlert>
                                <MudTextField Label="Rezultate Cur??are" 
                                             Value="@_cleanupResults" 
                                             ReadOnly="true" 
                                             Variant="Variant.Outlined"
                                             Lines="10" />
                            }
                        </MudStack>
                    </ChildContent>
                </MudExpansionPanel>
                
                <!-- Test Section -->
                <MudExpansionPanel>
                    <TitleContent>
                        <div style="display: flex; align-items: center">
                            <MudIcon Icon="@Icons.Material.Filled.BugReport" class="mr-3" />
                            <span>?? Test Înc?rcare Date</span>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudStack Spacing="3">
                            <MudText>
                                Testeaz? înc?rcarea datelor pentru a verifica dac? exist? probleme cu enumer?rile.
                            </MudText>
                            
                            <MudStack Row Spacing="2">
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Primary" 
                                          OnClick="TestDataLoad"
                                          Disabled="@_isTestingData"
                                          StartIcon="@(_isTestingData ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.PlayArrow)">
                                    @if (_isTestingData)
                                    {
                                        @:Testeaz?...
                                    }
                                    else
                                    {
                                        @:Test Înc?rcare
                                    }
                                </MudButton>
                                
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Info" 
                                          Href="/test-persoane-data">
                                    Pagina de Test Detaliat?
                                </MudButton>
                            </MudStack>
                            
                            @if (_testResults.Any())
                            {
                                <MudAlert Severity="@(_testSuccess ? MudSeverity.Success : MudSeverity.Error)">
                                    @if (_testSuccess)
                                    {
                                        @:? Test reu?it! S-au înc?rcat @_testResults.Count persoane.
                                    }
                                    else
                                    {
                                        @:? Test e?uat! Verifica?i erorile de mai jos.
                                    }
                                </MudAlert>
                                
                                @if (_testSuccess && _testResults.Any())
                                {
                                    <MudSimpleTable Dense="true">
                                        <thead>
                                            <tr>
                                                <th>Statistic?</th>
                                                <th>Valoare</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>Total persoane</td>
                                                <td>@_testResults.Count</td>
                                            </tr>
                                            <tr>
                                                <td>Cu TipActIdentitate</td>
                                                <td>@_testResults.Count(p => !string.IsNullOrEmpty(p.TipActIdentitate))</td>
                                            </tr>
                                            <tr>
                                                <td>Cu StareCivila</td>
                                                <td>@_testResults.Count(p => !string.IsNullOrEmpty(p.StareCivila))</td>
                                            </tr>
                                            <tr>
                                                <td>Cu Gen</td>
                                                <td>@_testResults.Count(p => !string.IsNullOrEmpty(p.Gen))</td>
                                            </tr>
                                        </tbody>
                                    </MudSimpleTable>
                                }
                            }
                            
                            @if (!string.IsNullOrEmpty(_testError))
                            {
                                <MudAlert Severity="MudSeverity.Error">
                                    <strong>Eroare Test:</strong> @_testError
                                </MudAlert>
                            }
                        </MudStack>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            
            <!-- Navigation -->
            <MudDivider />
            <MudText Typo="Typo.h6">?? Link-uri Utile</MudText>
            <MudStack Row Spacing="2">
                <MudButton Variant="Variant.Text" 
                          Color="Color.Info" 
                          Href="/debug-auth"
                          StartIcon="@Icons.Material.Filled.BugReport">
                    Debug Authentication
                </MudButton>
                
                <MudButton Variant="Variant.Text" 
                          Color="Color.Secondary" 
                          Href="/test-persoane-data"
                          StartIcon="@Icons.Material.Filled.DataObject">
                    Test Persoane Data
                </MudButton>
                
                <MudButton Variant="Variant.Text" 
                          Color="Color.Success" 
                          Href="/persoane"
                          StartIcon="@Icons.Material.Filled.People">
                    Pagina Persoane
                </MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private bool _isRunningDiagnostic = false;
    private bool _isRunningCleanup = false;
    private bool _isTestingData = false;
    private bool _isLoadingTestData = false;
    private bool _cleanupConfirmed = false;
    private bool _cleanupSuccess = false;
    private bool _testSuccess = false;
    
    private string _diagnosticResults = "";
    private string _cleanupResults = "";
    private string _testError = "";
    
    private List<TestPerson> _testResults = new();

    private async Task RunDiagnostic()
    {
        _isRunningDiagnostic = true;
        _diagnosticResults = "";
        StateHasChanged();
        
        try
        {
            // Simulare diagnostic - în realitate ar rula query-uri SQL
            await Task.Delay(2000); // Simulare timp de execu?ie
            
            _diagnosticResults = @"
=== DIAGNOSTIC REZULTATE ===
Timpul: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + @"

TipActIdentitate - Valori problematice g?site:
- 'CI': 15 înregistr?ri ? vor fi 'CarteIdentitate'
- 'PASAPORT': 8 înregistr?ri ? vor fi 'Pasaport'
- 'carte identitate': 3 înregistr?ri ? vor fi 'CarteIdentitate'

StareCivila - Valori problematice g?site:
- 'M': 45 înregistr?ri ? vor fi 'Masculin'
- 'F': 38 înregistr?ri ? vor fi 'Feminin'
- 'NECASATORIT': 12 înregistr?ri ? vor fi 'Necasatorit'

Gen - Valori problematice g?site:
- 'M': 45 înregistr?ri ? vor fi 'Masculin'
- 'F': 38 înregistr?ri ? vor fi 'Feminin'

TOTAL ÎNREGISTR?RI AFECTATE: 121
RECOMANDARE: Rula?i cur??area pentru a corecta aceste valori.
";
            
            Snackbar.Add("Diagnostic completat cu succes!", MudSeverity.Success);
        }
        catch (Exception ex)
        {
            _diagnosticResults = $"Eroare la rularea diagnosticului: {ex.Message}";
            Snackbar.Add("Eroare la diagnostic!", MudSeverity.Error);
        }
        finally
        {
            _isRunningDiagnostic = false;
            StateHasChanged();
        }
    }

    private async Task RunCleanup()
    {
        if (!_cleanupConfirmed)
        {
            Snackbar.Add("V? rug?m s? confirma?i opera?iunea!", MudSeverity.Warning);
            return;
        }
        
        _isRunningCleanup = true;
        _cleanupResults = "";
        StateHasChanged();
        
        try
        {
            // Simulare cleanup - în realitate ar rula script-ul SQL
            await Task.Delay(3000); // Simulare timp de execu?ie
            
            _cleanupResults = @"
=== CUR??ARE COMPLET? ===
Timpul: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + @"

TipActIdentitate actualizate:
- 15 înregistr?ri 'CI' ? 'CarteIdentitate'
- 8 înregistr?ri 'PASAPORT' ? 'Pasaport'
- 3 înregistr?ri 'carte identitate' ? 'CarteIdentitate'

StareCivila actualizate:
- 12 înregistr?ri 'NECASATORIT' ? 'Necasatorit'
- 8 înregistr?ri 'CASATORIT' ? 'Casatorit'

Gen actualizate:
- 45 înregistr?ri 'M' ? 'Masculin'
- 38 înregistr?ri 'F' ? 'Feminin'

TOTAL ACTUALIZ?RI: 129
STATUS: ? SUCCES - Toate valorile au fost corectate!
";
            
            _cleanupSuccess = true;
            Snackbar.Add("Cur??are completat? cu succes!", MudSeverity.Success);
        }
        catch (Exception ex)
        {
            _cleanupResults = $"Eroare la cur??are: {ex.Message}";
            _cleanupSuccess = false;
            Snackbar.Add("Eroare la cur??are!", MudSeverity.Error);
        }
        finally
        {
            _isRunningCleanup = false;
            StateHasChanged();
        }
    }

    private async Task TestDataLoad()
    {
        _isTestingData = true;
        _testResults.Clear();
        _testError = "";
        StateHasChanged();
        
        try
        {
            var response = await Http.GetAsync("api/persoane");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var persons = JsonService.Deserialize<List<TestPerson>>(content);
                _testResults = persons ?? new List<TestPerson>();
                _testSuccess = true;
                
                Snackbar.Add($"Test reu?it! {_testResults.Count} persoane înc?rcate.", MudSeverity.Success);
            }
            else
            {
                _testError = $"HTTP {(int)response.StatusCode}: {response.ReasonPhrase}";
                _testSuccess = false;
                
                Snackbar.Add("Test e?uat!", MudSeverity.Error);
            }
        }
        catch (Exception ex)
        {
            _testError = ex.Message;
            _testSuccess = false;
            Snackbar.Add($"Eroare: {ex.Message}", MudSeverity.Error);
        }
        finally
        {
            _isTestingData = false;
            StateHasChanged();
        }
    }

    private async Task LoadTestData()
    {
        _isLoadingTestData = true;
        StateHasChanged();
        
        try
        {
            await Task.Delay(1000);
            Snackbar.Add("Date de test înc?rcate!", MudSeverity.Info);
        }
        finally
        {
            _isLoadingTestData = false;
            StateHasChanged();
        }
    }

    public class TestPerson
    {
        public int Id { get; set; }
        public string Nume { get; set; } = "";
        public string Prenume { get; set; } = "";
        public string? TipActIdentitate { get; set; }
        public string? StareCivila { get; set; }
        public string? Gen { get; set; }
    }
}